

[
  
  
    
    
      {
        "title": "JVM 구조를 알아보도록 하자",
        "excerpt": "📚 목차\n\n1. Java Virtual Machine, 자바 실행기\n\n  자바는 JVM을 통해 OS로 도달\n\n\n2. JVM 구성요소\n\n  클래스로더 (Class Loader)\n  실행엔진 (Execution Engine)\n    \n      인터프리터\n      JIT 컴파일러\n      가비지 컬렉터\n    \n  \n  런타임 데이터 영역\n    \n      PC Register\n      JVM 스택\n      Native Method Stack\n      Method Area\n      Heap\n        \n          New/Young 영역\n          Old 영역\n        \n      \n    \n  \n\n\n\n\n1. Java Virtual Machine, 자바 실행기\n\n📌 자바는 JVM을 통해 OS로 도달\n\n  JVM까지의 과정: 자바는 Java Compiler를 통해 .java 파일을 .class 파일로 변환한 다음, 이를 JVM이 처리하여 OS에서 실행.\n    \n      .java → Java Compiler → .class → JVM → OS\n    \n  \n  Java Compiler는 jdk/bin/javac.exe 위치에 있습니다.\n\n\n\n\n2. JVM 구성요소\n\n\n출처: 위키피디아\n\n2.1 🔹 클래스로더 (Class Loader)\n\n  JVM 내에서 클래스 파일 및 JAR 내 저장된 클래스를 로드하고, 이를 JVM 위에 탑재.\n\n\n\n\n2.2 🔹 실행엔진 (Execution Engine)\n\n  Java 바이트코드(.class)를 실제로 실행.\n  바이트코드는 사람이 보기 편하도록 설계되었으나, 실행엔진이 이를 실제 기계어로 변환.\n\n\n▶️ 인터프리터\n\n  바이트코드를 한 줄씩 읽고 해석하여 실행.\n\n\n▶️ JIT 컴파일러\n\n  Just-In-Time Compilation: 실행 중 바이트코드를 기계어로 번역.\n  인터프리터 방식의 단점(속도 문제)을 보완.\n\n\n▶️ 가비지 컬렉터\n\n  사용되지 않는 객체를 탐색하여 메모리에서 제거.\n  메모리 누수를 방지하며, 별도의 정리 글에서 자세히 다룰 예정.\n\n\n\n\n2.3 🔹 런타임 데이터 영역 (Runtime Data Area)\n\n  운영체제로부터 할당받은 메모리 공간.\n  흔히 Method, Heap, Stack 영역으로 알려진 메모리 구조.\n\n\n\n\n▶️ PC Register\n\n  각 스레드에 하나씩 생성.\n  현재 실행 중인 명령어의 위치를 저장.\n\n\n▶️ JVM 스택\n\n  메서드 내 데이터 저장 공간. (예: 매개변수, 지역 변수, 리턴 값 등)\n\n\n▶️ Native Method Stack\n\n  자바가 아닌 타 언어(C, C++ 등)로 작성된 네이티브 코드 실행을 위한 메모리 공간.\n\n\n▶️ Method Area\n\n  클래스 정보 및 클래스 변수 저장 공간.\n  런타임 상수 풀(Runtime Constant Pool)에서 상수 관리.\n\n\n▶️ Heap\n\n  객체와 배열을 저장하는 메모리 공간.\n\n\n🔸 New/Young 영역\n\n  생명 주기가 짧은 객체를 저장.\n  가비지 컬렉션(GC)에 의해 정리되며, Minor GC로 처리.\n  구성:\n    \n      Eden 영역: 객체가 최초로 생성되는 장소.\n      Survivor 영역(Survivor 0, Survivor 1): Eden에서 살아남은 객체들이 이동.\n    \n  \n\n\n🔸 Old 영역\n\n  생명 주기가 긴 객체를 저장.\n  Major GC로 정리되며, Minor GC보다 속도가 느림.\n\n",
        "content": "📚 목차\n\n1. Java Virtual Machine, 자바 실행기\n\n  자바는 JVM을 통해 OS로 도달\n\n\n2. JVM 구성요소\n\n  클래스로더 (Class Loader)\n  실행엔진 (Execution Engine)\n    \n      인터프리터\n      JIT 컴파일러\n      가비지 컬렉터\n    \n  \n  런타임 데이터 영역\n    \n      PC Register\n      JVM 스택\n      Native Method Stack\n      Method Area\n      Heap\n        \n          New/Young 영역\n          Old 영역\n        \n      \n    \n  \n\n\n\n\n1. Java Virtual Machine, 자바 실행기\n\n📌 자바는 JVM을 통해 OS로 도달\n\n  JVM까지의 과정: 자바는 Java Compiler를 통해 .java 파일을 .class 파일로 변환한 다음, 이를 JVM이 처리하여 OS에서 실행.\n    \n      .java → Java Compiler → .class → JVM → OS\n    \n  \n  Java Compiler는 jdk/bin/javac.exe 위치에 있습니다.\n\n\n\n\n2. JVM 구성요소\n\n\n출처: 위키피디아\n\n2.1 🔹 클래스로더 (Class Loader)\n\n  JVM 내에서 클래스 파일 및 JAR 내 저장된 클래스를 로드하고, 이를 JVM 위에 탑재.\n\n\n\n\n2.2 🔹 실행엔진 (Execution Engine)\n\n  Java 바이트코드(.class)를 실제로 실행.\n  바이트코드는 사람이 보기 편하도록 설계되었으나, 실행엔진이 이를 실제 기계어로 변환.\n\n\n▶️ 인터프리터\n\n  바이트코드를 한 줄씩 읽고 해석하여 실행.\n\n\n▶️ JIT 컴파일러\n\n  Just-In-Time Compilation: 실행 중 바이트코드를 기계어로 번역.\n  인터프리터 방식의 단점(속도 문제)을 보완.\n\n\n▶️ 가비지 컬렉터\n\n  사용되지 않는 객체를 탐색하여 메모리에서 제거.\n  메모리 누수를 방지하며, 별도의 정리 글에서 자세히 다룰 예정.\n\n\n\n\n2.3 🔹 런타임 데이터 영역 (Runtime Data Area)\n\n  운영체제로부터 할당받은 메모리 공간.\n  흔히 Method, Heap, Stack 영역으로 알려진 메모리 구조.\n\n\n\n\n▶️ PC Register\n\n  각 스레드에 하나씩 생성.\n  현재 실행 중인 명령어의 위치를 저장.\n\n\n▶️ JVM 스택\n\n  메서드 내 데이터 저장 공간. (예: 매개변수, 지역 변수, 리턴 값 등)\n\n\n▶️ Native Method Stack\n\n  자바가 아닌 타 언어(C, C++ 등)로 작성된 네이티브 코드 실행을 위한 메모리 공간.\n\n\n▶️ Method Area\n\n  클래스 정보 및 클래스 변수 저장 공간.\n  런타임 상수 풀(Runtime Constant Pool)에서 상수 관리.\n\n\n▶️ Heap\n\n  객체와 배열을 저장하는 메모리 공간.\n\n\n🔸 New/Young 영역\n\n  생명 주기가 짧은 객체를 저장.\n  가비지 컬렉션(GC)에 의해 정리되며, Minor GC로 처리.\n  구성:\n    \n      Eden 영역: 객체가 최초로 생성되는 장소.\n      Survivor 영역(Survivor 0, Survivor 1): Eden에서 살아남은 객체들이 이동.\n    \n  \n\n\n🔸 Old 영역\n\n  생명 주기가 긴 객체를 저장.\n  Major GC로 정리되며, Minor GC보다 속도가 느림.\n\n",
        "url": "/java/2025/04/23/JVM-%EA%B5%AC%EC%A1%B01/"
      },
    
  
  
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Elements",
    "excerpt": "A demo of Markdown and HTML includes\n",
    "content": "Heading 1\n\nHeading 2\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6\n\nA small element\n\nA link\n\nLorem ipsum dolor sit amet, consectetur adip* isicing elit, sed do eiusmod *tempor incididunt ut labore et dolore magna aliqua.\n\nDuis aute irure dolor in A link reprehenderit in voluptate velit esse cillum bold text dolore eu fugiat nulla pariatur. Excepteur span element sint occaecat cupidatat non proident, sunt italicised text in culpa qui officia deserunt mollit anim id some code est laborum.\n\n\n  An item\n  An item\n  An item\n  An item\n  An item\n\n\n\n  Item one\n  Item two\n  Item three\n  Item four\n  Item five\n\n\n\n  A simple blockquote\n\n\nSome HTML…\n\n&lt;blockquote cite=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;\n  &lt;p&gt;You planning a vacation, Mr. Sullivan?&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;a href=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;Sunways Security Guard&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/blockquote&gt;\n\n\n…CSS…\n\nblockquote {\n  text-align: center;\n  font-weight: bold;\n}\nblockquote footer {\n  font-size: .8rem;\n}\n\n\n…and JavaScript\n\nconst blockquote = document.querySelector(\"blockquote\")\nconst bolden = (keyString, string) =&gt;\n  string.replace(new RegExp(keyString, 'g'), '&lt;strong&gt;'+keyString+'&lt;/strong&gt;')\n\nblockquote.innerHTML = bolden(\"Mr. Sullivan\", blockquote.innerHTML)\n\n\nSingle line of code\n\nHTML Includes\n\nContact form\n\n\n  \n    Contact\n    Name: *\n    \n\n    Email Address: *\n    \n\n    Message: *\n    \n\n    \n    \n    * indicates a required field\n\n    \n      \n      \n      \n    \n  \n\n\n\n\nPlease enable JavaScript to use the form.\n\n{% include site-form.html %}\n\n\nDemo map embed\n\n\n\n{% include map.html id=\"XXXXXX\" title=\"Coffee shop map\" %}\n\n\nButton include\n\nA button\n\nA button with icon  twitter\n\n\n{% include button.html text=\"A button\" link=\"https://david.darn.es\" %}\n{% include button.html text=\"A button with icon\" link=\"https://twitter.com/daviddarnes\" icon=\"twitter\" %}\n\n\nIcon include\n\ntwitter\ntwitter\n\n\n{% include icon.html id=\"twitter\" title=\"twitter\" %}\n[{% include icon.html id=\"linkedin\" title=\"twitter\" %}](https://www.linkedin.com/in/daviddarnes)\n\n\nVideo include\n\n\n  \n\n\n{% include video.html id=\"zrkcGL5H3MU\" title=\"Siteleaf tutorial video\" %}\n\n\nImage includes\n\n\n  \n  Image with caption\n\n\n\n  \n  Right aligned image\n\n\n\n  \n  Left aligned image\n\n\n\n  \n  \n\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Image with caption\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Right aligned image\" position=\"right\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Left aligned image\" position=\"left\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/1600/800?image=894\" alt=\"Image with just alt text\" %}\n\n",
    "url": "/elements/"
  },
  
  {
    "title": "About 정리공간",
    "excerpt": "Alembic is a starting point for Jekyll projects. Rather than starting from scratch, this boilerplate is designed to get the ball rolling immediately. Install it, configure it, tweak it, push it.\n",
    "content": "안녕하세요 개발자 유상문입니다. 생각한 내용에 대해 정리\n\nFork it  github\n\n\nFeatures\n\n\n  고민하고 정리하기를 좋아합니다.\n  개발과 요리, 캠핑\n\n\nredume\n\n  와디즈(Wadiz) 2022.01 ~ 2024.07 , 2025.03 ~\n    \n      결제 / 정산 개발\n    \n  \n  티몬(Tmon) 2021.07 ~ 2021.12\n    \n      쿠폰 개발\n    \n  \n  유비벨록스 2020.01 ~ 2021.07\n    \n      마이데이터 플랫폼\n    \n  \n  씨유홀딩스 2019.01 ~ 2019.12\n\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

