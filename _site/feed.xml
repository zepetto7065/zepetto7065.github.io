<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-GB"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-GB" /><updated>2025-06-02T00:56:59+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">정리공간</title><subtitle>Alembic is a starting point for Jekyll projects. Rather than starting from scratch, this boilerplate is designed to get the ball rolling immediately</subtitle><author><name>DavidDarnes</name></author><entry><title type="html">낙관적 락 &amp;amp; 비관적락</title><link href="http://localhost:4000/%EB%8F%99%EC%8B%9C%EC%84%B1/2025/06/01/%EB%82%99%EA%B4%80%EC%A0%81-%EB%9D%BD&%EB%B9%84%EA%B4%80%EC%A0%81-%EB%9D%BD/" rel="alternate" type="text/html" title="낙관적 락 &amp;amp; 비관적락" /><published>2025-06-01T00:00:00+01:00</published><updated>2025-06-01T00:00:00+01:00</updated><id>http://localhost:4000/%EB%8F%99%EC%8B%9C%EC%84%B1/2025/06/01/%EB%82%99%EA%B4%80%EC%A0%81%20%EB%9D%BD&amp;%EB%B9%84%EA%B4%80%EC%A0%81%20%EB%9D%BD</id><content type="html" xml:base="http://localhost:4000/%EB%8F%99%EC%8B%9C%EC%84%B1/2025/06/01/%EB%82%99%EA%B4%80%EC%A0%81-%EB%9D%BD&amp;%EB%B9%84%EA%B4%80%EC%A0%81-%EB%9D%BD/"><![CDATA[<h2 id="동시성">동시성</h2>

<p>“동시성 이슈 (concurrency issue)”는 <strong>여러 작업이 동시에 같은 자원에 접근하여 변경할 때 발생하는 문제</strong>를 말한다.
<br /></p>

<blockquote>
  <p>데이터베이스에 동시에 접근하여 수정을 하려한다면?</p>
</blockquote>

<p>위와 같은 문제를 해결하기 위해 데이터베이스의 락(Lock)을 사용하여 충돌을 방지한다.</p>
<ul>
  <li>테이블에 접근시 락이 걸려있으면 수정이 불가하고 락이 풀려 있을 때만 수정이 가능하다.</li>
  <li>테이블을 수정한다면 내가 이 값을 수정한다고 선점</li>
</ul>

<h3 id="lock">Lock?</h3>
<p>멀티스레드 환경(또는 여러 트랜잭션 환경)에서 공유 자원을 동시에 수정하려할떄의 데이터 충돌
<br />
<strong>-&gt; 이를 막기 위한 전략이 락 (Lock)이다.</strong></p>

<hr />

<h2 id="낙관적-락-optimistic-lock-vs-비관적-락-pessimistic-lock">낙관적 락 (Optimistic Lock) vs 비관적 락 (Pessimistic Lock)</h2>
<blockquote>
  <p>충돌을 해결하기 위한 락 메커니즘</p>
</blockquote>

<h3 id="낙관적-락">낙관적 락</h3>
<ul>
  <li>“왠만하면 다른 사람이 데이터를 안 거드릴 거야”라는 락을 걸지 않다가, 최종 커밋 전에 충돌을 감지한다.</li>
  <li>충돌하면 <strong>재시도</strong> 또는 <strong>실패 처리</strong></li>
</ul>

<h4 id="장점">장점</h4>
<ul>
  <li>락을 걸지 않으므로 비관적 락 보다 성능이 우수하다.</li>
  <li>충돌이 적은 상황에서 매우 효율적이다.</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>충돌 발생시 비용이 발생한다.</li>
  <li><strong>충돌이 많으면</strong> 성능 저하가 발생한다.</li>
</ul>

<h4 id="대표적-예">대표적 예</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="n">coupon</span> <span class="k">SET</span> <span class="n">quantity</span> <span class="o">=</span> <span class="n">quantity</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="k">version</span> <span class="o">=</span> <span class="k">version</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="k">version</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>
<p>버전이 일치하지 않으면 실패한다!!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Version</span>
<span class="kd">private</span> <span class="nc">Integer</span> <span class="n">version</span><span class="o">;</span>
</code></pre></div></div>
<p>JPA로 구현한 낙관적 락</p>

<h3 id="비관적-락">비관적 락</h3>
<ul>
  <li>“다른 누군가가 데이터를 수정될 것”이다라는 가정으로 미리 락을 걸어, 공유자원(스레드/트랜잭션)에 접근하지 못하게 하는 것</li>
</ul>

<h4 id="장점-1">장점</h4>
<ul>
  <li>충돌을 사전에 방지한다.</li>
  <li>데이터 정합성 확보에 굉장히 명확한 방식</li>
</ul>

<h4 id="단점-1">단점</h4>
<ul>
  <li>락으로 인해 대기 시간이 생긴다. (누군가가 작업이 끝날때까지 대기를 해야하므로!)</li>
  <li>데드락 위험이 있음 ( 두개 이상의 트랜잭션이 서로가 가진 락을 기다리면서 무한정 대기하는 상태 )</li>
  <li><strong>락이 많아 질수록</strong> 성능이 저하된다.</li>
</ul>

<h3 id="대표적-예-1">대표적 예</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">coupon</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">FOR</span> <span class="k">UPDATE</span><span class="p">;</span>
</code></pre></div></div>
<p>다른 트랜잭션이 데이터를 건드리지 못하도록 즉시 락을 건다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CouponRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Coupon</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Lock</span><span class="o">(</span><span class="nc">LockModeType</span><span class="o">.</span><span class="na">PESSIMISTIC_WRITE</span><span class="o">)</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"SELECT c FROM Coupon c WHERE c.id = :id"</span><span class="o">)</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Coupon</span><span class="o">&gt;</span> <span class="nf">findByIdForUpdate</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>물론 JPA에서도 LockModeType을 통해 비관적 락을 설정할 수 있다</p>

<hr />

<h2 id="syncronized">Syncronized</h2>
<h3 id="비관적-락의-대표적인-예">비관적 락의 대표적인 예</h3>
<blockquote>
  <p>자바에서 가장 기본적인 락 메커니즘</p>
</blockquote>

<p>하나의 스레드만 특정 블록/메서드에 접근 가능하도록 한다.
<br /> 공유 자원 접근 전 선제적으로 락을 건다.
<strong>다른 스레드는 락이 풀릴 때 까지 대기한다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">count</span><span class="o">++;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">count</span><span class="o">++;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="문제점">문제점</h3>
<p>syncronized는 단일 JVM 에서만 유효하다. 
<br />같은 메모리 공간에서만 유효하다는 말인 즉슨, MSA 구조와 같은 서버가 여러대인 공간에서 문제가 발생할 수 있다.</p>

<blockquote>
  <p>MSA 환경에서 여러 서버가 같은 쿠폰 번호를 발급하거나, 같은 재고를 차감하는 로직을 수행한다면?</p>
  <blockquote>
    <p>서버 A,B,C는 자기 서버의 JVM 기준의 락을 걸기 떄문에 각각의 서버가 동시에 같은 쿠폰을 발급할 수 있다.</p>
  </blockquote>
</blockquote>

<h2 id="atomic-class">Atomic class</h2>
<h3 id="낙관적-락의-대표적인-예">낙관적 락의 대표적인 예</h3>
<p>데이터를 가져오고 시도, 그 후 실패시 다시 반복 (낙관적 락 메커니즘)<br />
어떤 스레드도 락 영향을 받지 않기 때문에 context stwitching 비용이 절감한다.</p>

<h4 id="cas-compare-and-set-알고리즘">CAS (Compare And Set) 알고리즘</h4>
<p><img src="../assets/images/screenshot-202506010841.png" alt="screenshot-202506010841.png" />
CAS 알고리즘을 베이스로 구현되어진 getAndAddInt</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AtomicInteger</span> <span class="kd">extends</span> <span class="nc">Number</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">6214790243416807050L</span><span class="o">;</span>

    <span class="c1">// setup to use Unsafe.compareAndSwapInt for updates</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="nc">Unsafe</span><span class="o">.</span><span class="na">getUnsafe</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">valueOffset</span><span class="o">;</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">valueOffset</span> <span class="o">=</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span>
                <span class="o">(</span><span class="nc">AtomicInteger</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">"value"</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span> <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
</code></pre></div></div>
<p>AtomicInteger 내부에는 volatile과 함께 변수가 선언되어있다.</p>
<blockquote>
  <p>volatile? 변수의 값을 Read&amp;Write할 때마다 CPU cache가 아닌 Main Memory에서 읽는 것</p>
</blockquote>

<p>멀티스레드 환경에서 여러 Thread가 해당 자원에 접근을 하게되는 상황이라면 동일한 메모리의 자원을 접근해야한다.
<br /> 가령 1번 스레드가 CPU cache에 접근하고 2번 스레드가 Main Memory cache에 논리적 연산이 정상적이지 않게 나오는 경우가 발생한다.
<br /><br />
모든 스레드가 value의 최신값을 볼 수 있게 보장 (가시성)하며 AtomicInteger 내 JVM 정합성을 보장하기 위해 ( CAS 성공 후 다른 스레드에 반영되어야 함 ) volatile 변수가 선언되었다 할 수 있다.
<br /><br />
=&gt; 가시성과 동시성은 별개의 문제로 구분해야 한다.<br />
—</p>]]></content><author><name>DavidDarnes</name></author><category term="동시성" /><summary type="html"><![CDATA[동시성 “동시성 이슈 (concurrency issue)”는 여러 작업이 동시에 같은 자원에 접근하여 변경할 때 발생하는 문제를 말한다. 데이터베이스에 동시에 접근하여 수정을 하려한다면? 위와 같은 문제를 해결하기 위해 데이터베이스의 락(Lock)을 사용하여 충돌을 방지한다. 테이블에 접근시 락이 걸려있으면 수정이 불가하고 락이 풀려 있을 때만 수정이 가능하다. 테이블을 수정한다면 내가 이 값을 수정한다고 선점 Lock? 멀티스레드 환경(또는 여러 트랜잭션 환경)에서 공유 자원을 동시에 수정하려할떄의 데이터 충돌 -&gt; 이를 막기 위한 전략이 락 (Lock)이다. 낙관적 락 (Optimistic Lock) vs 비관적 락 (Pessimistic Lock) 충돌을 해결하기 위한 락 메커니즘 낙관적 락 “왠만하면 다른 사람이 데이터를 안 거드릴 거야”라는 락을 걸지 않다가, 최종 커밋 전에 충돌을 감지한다. 충돌하면 재시도 또는 실패 처리 장점 락을 걸지 않으므로 비관적 락 보다 성능이 우수하다. 충돌이 적은 상황에서 매우 효율적이다. 단점 충돌 발생시 비용이 발생한다. 충돌이 많으면 성능 저하가 발생한다. 대표적 예 UPDATE coupon SET quantity = quantity - 1, version = version + 1 WHERE id = 1 AND version = 3; 버전이 일치하지 않으면 실패한다!! @Version private Integer version; JPA로 구현한 낙관적 락 비관적 락 “다른 누군가가 데이터를 수정될 것”이다라는 가정으로 미리 락을 걸어, 공유자원(스레드/트랜잭션)에 접근하지 못하게 하는 것 장점 충돌을 사전에 방지한다. 데이터 정합성 확보에 굉장히 명확한 방식 단점 락으로 인해 대기 시간이 생긴다. (누군가가 작업이 끝날때까지 대기를 해야하므로!) 데드락 위험이 있음 ( 두개 이상의 트랜잭션이 서로가 가진 락을 기다리면서 무한정 대기하는 상태 ) 락이 많아 질수록 성능이 저하된다. 대표적 예 SELECT * FROM coupon WHERE id = 1 FOR UPDATE; 다른 트랜잭션이 데이터를 건드리지 못하도록 즉시 락을 건다. public interface CouponRepository extends JpaRepository&lt;Coupon, Long&gt; { @Lock(LockModeType.PESSIMISTIC_WRITE) @Query("SELECT c FROM Coupon c WHERE c.id = :id") Optional&lt;Coupon&gt; findByIdForUpdate(@Param("id") Long id); } 물론 JPA에서도 LockModeType을 통해 비관적 락을 설정할 수 있다 Syncronized 비관적 락의 대표적인 예 자바에서 가장 기본적인 락 메커니즘 하나의 스레드만 특정 블록/메서드에 접근 가능하도록 한다. 공유 자원 접근 전 선제적으로 락을 건다. 다른 스레드는 락이 풀릴 때 까지 대기한다. public synchronized void increment() { count++; } public void increment() { synchronized (this) { count++; } } 문제점 syncronized는 단일 JVM 에서만 유효하다. 같은 메모리 공간에서만 유효하다는 말인 즉슨, MSA 구조와 같은 서버가 여러대인 공간에서 문제가 발생할 수 있다. MSA 환경에서 여러 서버가 같은 쿠폰 번호를 발급하거나, 같은 재고를 차감하는 로직을 수행한다면? 서버 A,B,C는 자기 서버의 JVM 기준의 락을 걸기 떄문에 각각의 서버가 동시에 같은 쿠폰을 발급할 수 있다. Atomic class 낙관적 락의 대표적인 예 데이터를 가져오고 시도, 그 후 실패시 다시 반복 (낙관적 락 메커니즘) 어떤 스레드도 락 영향을 받지 않기 때문에 context stwitching 비용이 절감한다. CAS (Compare And Set) 알고리즘 CAS 알고리즘을 베이스로 구현되어진 getAndAddInt public class AtomicInteger extends Number implements java.io.Serializable { private static final long serialVersionUID = 6214790243416807050L; // setup to use Unsafe.compareAndSwapInt for updates private static final Unsafe unsafe = Unsafe.getUnsafe(); private static final long valueOffset; static { try { valueOffset = unsafe.objectFieldOffset (AtomicInteger.class.getDeclaredField("value")); } catch (Exception ex) { throw new Error(ex); } } private volatile int value; AtomicInteger 내부에는 volatile과 함께 변수가 선언되어있다. volatile? 변수의 값을 Read&amp;Write할 때마다 CPU cache가 아닌 Main Memory에서 읽는 것 멀티스레드 환경에서 여러 Thread가 해당 자원에 접근을 하게되는 상황이라면 동일한 메모리의 자원을 접근해야한다. 가령 1번 스레드가 CPU cache에 접근하고 2번 스레드가 Main Memory cache에 논리적 연산이 정상적이지 않게 나오는 경우가 발생한다. 모든 스레드가 value의 최신값을 볼 수 있게 보장 (가시성)하며 AtomicInteger 내 JVM 정합성을 보장하기 위해 ( CAS 성공 후 다른 스레드에 반영되어야 함 ) volatile 변수가 선언되었다 할 수 있다. =&gt; 가시성과 동시성은 별개의 문제로 구분해야 한다. —]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">커서 기반 페이징 (Cursor Based Pagination)</title><link href="http://localhost:4000/implementation/2025/05/18/CursorBasedPaging/" rel="alternate" type="text/html" title="커서 기반 페이징 (Cursor Based Pagination)" /><published>2025-05-18T00:00:00+01:00</published><updated>2025-05-18T00:00:00+01:00</updated><id>http://localhost:4000/implementation/2025/05/18/CursorBasedPaging</id><content type="html" xml:base="http://localhost:4000/implementation/2025/05/18/CursorBasedPaging/"><![CDATA[<h2 id="1-페이지네이션-이란-">1. 페이지네이션 이란 ?</h2>
<blockquote>
  <p>대용량 데이터 처리 방식을 나누다가 나온 주제로 정리를 하기 위해 이 글을 작성합니다.</p>
</blockquote>

<p>페이지네이션 (Pagination)은 웹 페이지의 컨텐츠를 여러 페이지로 나누는 것을 얘기합니다. 웹 페이지일 수도 있고, 데이터일 수 있습니다.</p>

<hr />

<h3 id="조건">조건</h3>
<p>페이지네이션을 하기 위한 조건은 아래와 같다.</p>
<ol>
  <li>한 페이지에 얼만큼 보여주어야 하는가 <br /><strong>limit</strong> 혹은 <strong>page size</strong></li>
  <li>시작점 <br /><strong>offset</strong></li>
</ol>

<hr />

<h3 id="구현">구현</h3>
<p>페이지 네이션에는 크게 2가지 구현 방식 존재합니다.</p>
<ol>
  <li>오프셋 기반 (offset based pagination)</li>
  <li>커서드 기반 (cursor based pagination)</li>
</ol>

<hr />

<h2 id="1-오프셋-기반-페이징offset-based-pagination이란">1. 오프셋 기반 페이징(offset based pagination)이란?</h2>
<p>가장 널리 쓰이는 구현 방식, 특정 위치 (시작점, offset)에서 정해진 개수(limit) 만큼 데이터를 조회하는 방식입니다.</p>

<h3 id="장점">장점</h3>
<h4 id="구현이-간단하다">구현이 간단하다</h4>
<ol>
  <li>관계형베이스 (MySQL, PostgreSQL 등)에서 LIMIT, OFFSET 키워드를 기본 제공한다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span>
 <span class="k">LIMIT</span> <span class="mi">10</span>  <span class="o">//</span><span class="mi">10</span><span class="err">개씩</span> <span class="err">가져와</span>
 <span class="k">OFFSET</span> <span class="mi">20</span><span class="p">;</span> <span class="o">//</span><span class="err">시작점은</span> <span class="mi">20</span><span class="err">부터</span>
</code></pre></div>    </div>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">//</span><span class="n">Oracle</span> <span class="mi">12</span><span class="k">c</span> <span class="err">이상에서는</span> <span class="k">FETCH</span> <span class="k">FIRST</span><span class="p">,</span> <span class="k">OFFSEt</span> <span class="err">같은</span> <span class="err">구문을</span> <span class="err">지원한다</span><span class="p">.</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span>
<span class="k">OFFSET</span> <span class="mi">20</span> <span class="k">ROWS</span> <span class="k">FETCH</span> <span class="k">NEXT</span> <span class="mi">10</span> <span class="k">ROWS</span> <span class="k">ONLY</span><span class="p">;</span>

<span class="o">//</span><span class="n">Oracle</span> <span class="mi">11</span><span class="k">g</span> <span class="err">이하에서는</span> <span class="err">서브쿼로</span> <span class="err">우회를</span> <span class="err">해야함</span><span class="p">;</span>
<span class="o">//</span><span class="mi">21</span><span class="o">~</span><span class="mi">30</span><span class="err">번째</span> <span class="err">행을</span> <span class="err">조회</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="p">(</span>
   <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="n">ROWNUM</span> <span class="n">rnum</span> <span class="k">FROM</span> <span class="p">(</span>
     <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span>
   <span class="p">)</span> <span class="n">a</span> <span class="k">WHERE</span> <span class="n">ROWNUM</span> <span class="o">&lt;=</span> <span class="mi">30</span>
<span class="p">)</span>
<span class="k">WHERE</span> <span class="n">rnum</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>조금 이따 얘기하겠지만 이전 페이지의 상태를 기억할 필요가 없이, limit와 page만 넘기면 된다.</li>
  <li>Spring JPA, Django ORM 과 같은 프레임워크에서 .findAll({offset, limit}) 같은 옵션을 주면 간단히 구현이 된다.</li>
</ol>

<h3 id="단점">단점</h3>
<h4 id="데이터-변경-문제">데이터 변경 문제</h4>
<p>오프셋의 문제는 몇개부터 몇개를 잘라오는 방식이기 때문에, 데이터가 중간에 추가가 되거나 삭제가 되면 <strong>중복 문제</strong>가 발생한다.</p>

<p>예를 들어</p>
<ul>
  <li>A가 1~10번 페이지를 먼저 조회</li>
  <li>B가 1번 글을 삭제를 함</li>
  <li>A가 다음 페이지인 11번~20번을 조회하였지만 1번 글이 삭제되어 10번부터 19번까지 조회</li>
  <li><strong>10번의 글이 중복으로 조회가 됨.</strong></li>
</ul>

<h4 id="대용량의-경우-성능-문제가-존재">대용량의 경우, 성능 문제가 존재</h4>
<blockquote>
  <p>사실 이 글을 쓰게된 핵심 이유가 여기 있다. <br /></p>
  <blockquote>
    <p>OFFSET은 DB 내부적으로 앞의 데이터를 전부 스캔 (FULL SCAN) 후에 건너띄는 방식이라, OFFSET이 크다면 성능이 떨어질수 있다.<br />
예를 들어 OFFSET 방식에 의해 1000001번째 ~ 1000010번째 데이터를 조회한다고 하면, 앞의 100만개의 데이터를 FULL 스캔을 해야하는 것이다.</p>
  </blockquote>
</blockquote>

<h2 id="2-커서-기반-페이징-cursor-based-pagination">2. 커서 기반 페이징 (Cursor Based Pagination)</h2>
<blockquote>
  <p>위 단점을 보완할 수 있는게 커서 기반 페이징 방식이다.</p>
</blockquote>

<p>커서 기반 페이징(Cursor Based Pagination)은 <strong>어디서 시작할지</strong> 명확히 하는 방식이다.
커서 기반은 정렬의 기준이 되는 값이 필요한데, 이를 <strong>커서 (Cursor)</strong>라고 한다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
<span class="k">WHERE</span> <span class="n">created_at</span> <span class="o">&lt;</span> <span class="s1">'2024-01-01 12:00:00'</span> <span class="o">//</span><span class="s1">'2024-01-01 12:00:00'</span> <span class="err">가</span> <span class="err">커서이다</span><span class="p">.</span> <span class="err">해당</span> <span class="err">시점</span> <span class="err">이전</span> <span class="err">글</span> <span class="mi">10</span><span class="err">개를</span> <span class="err">조회</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="장점-1">장점</h3>
<h4 id="데이터-중복-문제-해결">데이터 중복 문제 해결</h4>
<blockquote>
  <p>상황을 가정해보자. A 사용자가 최근 글 10개 1페이지를 본 이후 B 사용자가 글 하나를 삭제 &gt; A 사용자가 2 페이지 요청</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 1페이지</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span> <span class="k">DESC</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>

<span class="c1">-- 2페이지 (A는 마지막 글의 id = 1000 을 커서로 기억하고 있음)</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">1000</span> <span class="o">//</span><span class="mi">1000</span><span class="err">이</span> <span class="err">커서다</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span> <span class="k">DESC</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>
<ul>
  <li>어떤 값을 커서로 쓸건지도 고민해볼 대상이다. 날짜와 같은 값도 cursor가 될수 있지만, 고유성이 보장되고, 인덱싱이 되는 인자면 더욱 유리할 것. 또한 카디널리티가 낮은 (중복도가 높은) 인자가 검색에 유리할 것이다.</li>
  <li>단 id 의 생성 순서가 보장되어야한다. UUID와 같은 랜덤한 값은 페이징하기 적절치 않다.</li>
</ul>

<h4 id="성능이-보다-좋다">성능이 보다 좋다.</h4>
<blockquote>
  <p>커서 기반은 무작정으로 앞에서 풀스캔을 하지 않는다.</p>
  <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- created_at에 인덱스가 있다면, 아래는 범위 조회로 빠르게 동작</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
<span class="k">WHERE</span> <span class="n">created_at</span> <span class="o">&lt;</span> <span class="s1">'2024-12-31 23:59:59'</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div>  </div>
</blockquote>

<h2 id="100만건의-유저의-수를-가지고-있는-테이블-조회-성능-비교">100만건의 유저의 수를 가지고 있는 테이블 조회 성능 비교</h2>
<p><img src="/assets/images/screentshot-20250528202554.png" alt="test" />
<img src="/assets/images/screentshot-20250528202555.png" alt="test" /></p>

<h2 id="offset-928ms-보다-cursor-472ms로-두배의-성능-차이를-보인다">offset (928ms) 보다 cursor (472ms)로 두배의 성능 차이를 보인다.</h2>
<p><img src="/assets/images/screentshot-20250528202556.png" alt="test" />
  <img src="/assets/images/screentshot-20250528202557.png" alt="test" />
  <img src="/assets/images/screentshot-20250528202558.png" alt="test" /></p>

<h3 id="단점-1">단점</h3>
<h4 id="이전-페이지로의-이동이-어렵다">이전 페이지로의 이동이 어렵다.</h4>
<ul>
  <li>이전 페이지로 이동을 하려면 커서를 되짚을 방법이 필요하다.
    <blockquote>
      <p>A가 3페이지를 갔다가 2페이지로 돌아가려한다.<br /></p>
    </blockquote>
  </li>
</ul>

<ol>
  <li>2페이지의 마지막 글을 기억하고</li>
  <li>정렬을 반대로하여, Limit 만큼 뽑아낸다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- created_at이 '2024-01-01'인 경우 이전 페이지를 보려면</span>
<span class="o">//</span><span class="mi">2</span><span class="err">페이지의</span> <span class="err">마지막</span> <span class="err">글이</span> <span class="mi">12</span><span class="o">/</span><span class="mi">30</span> <span class="mi">23</span><span class="p">:</span><span class="mi">59</span><span class="p">:</span><span class="mi">59</span> <span class="err">에</span> <span class="err">작성되었다</span> <span class="err">가정하면</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">posts</span>
<span class="k">WHERE</span> <span class="n">created_at</span> <span class="o">&gt;</span> <span class="s1">'2024-12-30 23:59:59'</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">ASC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="오프셋처럼-특정-페이지-번호로-직접-이동-불가">오프셋처럼 특정 페이지 번호로 직접 이동 불가</h4>
<blockquote>
  <p>9페이지 주세요 같은 특정 페이지로 이동은 불가하다.</p>
</blockquote>

<h2 id="3-언제-cursor-기반이-좋을까">3. 언제 cursor 기반이 좋을까?</h2>
<blockquote>
  <p>SNS 피드, 채팅 로그 등 무한 스크롤 같은 경우, 커서 페이징의 단점을 띄기 어려운 구조이며 <br />
실시간성으로 데이터가 자주 변하는 시스템의 경우 적절하다</p>
</blockquote>

<h2 id="4-대용량-배치는-어떨까">4. 대용량 배치는 어떨까?</h2>
<ul>
  <li>정산 같은 도메인을 개발하다 보면 하루에 수십 만건에서 수억건에 해당하는 데이터를 조회하는 경우가 있다.</li>
  <li>offset 이전의 데이터를 full scan 하는 offset 방식보다 cursor 방식 쿼리 성능 측면에서 유리하다.</li>
  <li>또한 데이터의 중복이나 누락의 위험도가 없다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">-- 초기 커서</span>
  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">my_table</span>
  <span class="k">WHERE</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span> <span class="k">ASC</span>
  <span class="k">LIMIT</span> <span class="mi">10000</span><span class="p">;</span>
    
  <span class="c1">-- 이후 반복</span>
  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">my_table</span>
  <span class="k">WHERE</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="p">:</span><span class="n">last_processed_id</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span> <span class="k">ASC</span>
  <span class="k">LIMIT</span> <span class="mi">10000</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="단-반드시-pk의-정렬-기준이-순차적이고-고유해야한다-그리고-병렬-처리시-범위를-쪼개서-병렬-커서-관리가-필요하다"><strong>단, 반드시 PK의 정렬 기준이 순차적이고 고유해야한다. 그리고 병렬 처리시 범위를 쪼개서 병렬 커서 관리가 필요하다.</strong></h3>]]></content><author><name>DavidDarnes</name></author><category term="implementation" /><summary type="html"><![CDATA[1. 페이지네이션 이란 ? 대용량 데이터 처리 방식을 나누다가 나온 주제로 정리를 하기 위해 이 글을 작성합니다. 페이지네이션 (Pagination)은 웹 페이지의 컨텐츠를 여러 페이지로 나누는 것을 얘기합니다. 웹 페이지일 수도 있고, 데이터일 수 있습니다. 조건 페이지네이션을 하기 위한 조건은 아래와 같다. 한 페이지에 얼만큼 보여주어야 하는가 limit 혹은 page size 시작점 offset 구현 페이지 네이션에는 크게 2가지 구현 방식 존재합니다. 오프셋 기반 (offset based pagination) 커서드 기반 (cursor based pagination) 1. 오프셋 기반 페이징(offset based pagination)이란? 가장 널리 쓰이는 구현 방식, 특정 위치 (시작점, offset)에서 정해진 개수(limit) 만큼 데이터를 조회하는 방식입니다. 장점 구현이 간단하다 관계형베이스 (MySQL, PostgreSQL 등)에서 LIMIT, OFFSET 키워드를 기본 제공한다. SELECT * FROM posts ORDER BY created_at DESC LIMIT 10 //10개씩 가져와 OFFSET 20; //시작점은 20부터 //Oracle 12c 이상에서는 FETCH FIRST, OFFSEt 같은 구문을 지원한다. SELECT * FROM posts ORDER BY created_at DESC OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY; //Oracle 11g 이하에서는 서브쿼로 우회를 해야함; //21~30번째 행을 조회 SELECT * FROM ( SELECT a.*, ROWNUM rnum FROM ( SELECT * FROM posts ORDER BY created_at DESC ) a WHERE ROWNUM &lt;= 30 ) WHERE rnum &gt; 20; 조금 이따 얘기하겠지만 이전 페이지의 상태를 기억할 필요가 없이, limit와 page만 넘기면 된다. Spring JPA, Django ORM 과 같은 프레임워크에서 .findAll({offset, limit}) 같은 옵션을 주면 간단히 구현이 된다. 단점 데이터 변경 문제 오프셋의 문제는 몇개부터 몇개를 잘라오는 방식이기 때문에, 데이터가 중간에 추가가 되거나 삭제가 되면 중복 문제가 발생한다. 예를 들어 A가 1~10번 페이지를 먼저 조회 B가 1번 글을 삭제를 함 A가 다음 페이지인 11번~20번을 조회하였지만 1번 글이 삭제되어 10번부터 19번까지 조회 10번의 글이 중복으로 조회가 됨. 대용량의 경우, 성능 문제가 존재 사실 이 글을 쓰게된 핵심 이유가 여기 있다. OFFSET은 DB 내부적으로 앞의 데이터를 전부 스캔 (FULL SCAN) 후에 건너띄는 방식이라, OFFSET이 크다면 성능이 떨어질수 있다. 예를 들어 OFFSET 방식에 의해 1000001번째 ~ 1000010번째 데이터를 조회한다고 하면, 앞의 100만개의 데이터를 FULL 스캔을 해야하는 것이다. 2. 커서 기반 페이징 (Cursor Based Pagination) 위 단점을 보완할 수 있는게 커서 기반 페이징 방식이다. 커서 기반 페이징(Cursor Based Pagination)은 어디서 시작할지 명확히 하는 방식이다. 커서 기반은 정렬의 기준이 되는 값이 필요한데, 이를 커서 (Cursor)라고 한다. SELECT * FROM posts WHERE created_at &lt; '2024-01-01 12:00:00' //'2024-01-01 12:00:00' 가 커서이다. 해당 시점 이전 글 10개를 조회 ORDER BY created_at DESC LIMIT 10; 장점 데이터 중복 문제 해결 상황을 가정해보자. A 사용자가 최근 글 10개 1페이지를 본 이후 B 사용자가 글 하나를 삭제 &gt; A 사용자가 2 페이지 요청 -- 1페이지 SELECT * FROM posts ORDER BY id DESC LIMIT 10; -- 2페이지 (A는 마지막 글의 id = 1000 을 커서로 기억하고 있음) SELECT * FROM posts WHERE id &lt; 1000 //1000이 커서다 ORDER BY id DESC LIMIT 10; 어떤 값을 커서로 쓸건지도 고민해볼 대상이다. 날짜와 같은 값도 cursor가 될수 있지만, 고유성이 보장되고, 인덱싱이 되는 인자면 더욱 유리할 것. 또한 카디널리티가 낮은 (중복도가 높은) 인자가 검색에 유리할 것이다. 단 id 의 생성 순서가 보장되어야한다. UUID와 같은 랜덤한 값은 페이징하기 적절치 않다. 성능이 보다 좋다. 커서 기반은 무작정으로 앞에서 풀스캔을 하지 않는다. -- created_at에 인덱스가 있다면, 아래는 범위 조회로 빠르게 동작 SELECT * FROM posts WHERE created_at &lt; '2024-12-31 23:59:59' ORDER BY created_at DESC LIMIT 10; 100만건의 유저의 수를 가지고 있는 테이블 조회 성능 비교 offset (928ms) 보다 cursor (472ms)로 두배의 성능 차이를 보인다. 단점 이전 페이지로의 이동이 어렵다. 이전 페이지로 이동을 하려면 커서를 되짚을 방법이 필요하다. A가 3페이지를 갔다가 2페이지로 돌아가려한다. 2페이지의 마지막 글을 기억하고 정렬을 반대로하여, Limit 만큼 뽑아낸다. -- created_at이 '2024-01-01'인 경우 이전 페이지를 보려면 //2페이지의 마지막 글이 12/30 23:59:59 에 작성되었다 가정하면 SELECT * FROM posts WHERE created_at &gt; '2024-12-30 23:59:59' ORDER BY created_at ASC LIMIT 10; 오프셋처럼 특정 페이지 번호로 직접 이동 불가 9페이지 주세요 같은 특정 페이지로 이동은 불가하다. 3. 언제 cursor 기반이 좋을까? SNS 피드, 채팅 로그 등 무한 스크롤 같은 경우, 커서 페이징의 단점을 띄기 어려운 구조이며 실시간성으로 데이터가 자주 변하는 시스템의 경우 적절하다 4. 대용량 배치는 어떨까? 정산 같은 도메인을 개발하다 보면 하루에 수십 만건에서 수억건에 해당하는 데이터를 조회하는 경우가 있다. offset 이전의 데이터를 full scan 하는 offset 방식보다 cursor 방식 쿼리 성능 측면에서 유리하다. 또한 데이터의 중복이나 누락의 위험도가 없다. -- 초기 커서 SELECT * FROM my_table WHERE id &gt; 0 ORDER BY id ASC LIMIT 10000; -- 이후 반복 SELECT * FROM my_table WHERE id &gt; :last_processed_id ORDER BY id ASC LIMIT 10000; 단, 반드시 PK의 정렬 기준이 순차적이고 고유해야한다. 그리고 병렬 처리시 범위를 쪼개서 병렬 커서 관리가 필요하다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JVM 구조를 알아보도록 하자</title><link href="http://localhost:4000/java/2025/04/23/JVM-%EA%B5%AC%EC%A1%B01/" rel="alternate" type="text/html" title="JVM 구조를 알아보도록 하자" /><published>2025-04-23T00:00:00+01:00</published><updated>2025-04-23T00:00:00+01:00</updated><id>http://localhost:4000/java/2025/04/23/JVM%20%EA%B5%AC%EC%A1%B01</id><content type="html" xml:base="http://localhost:4000/java/2025/04/23/JVM-%EA%B5%AC%EC%A1%B01/"><![CDATA[<hr />

<h2 id="1-java-virtual-machine-자바-실행기">1. Java Virtual Machine, 자바 실행기</h2>

<hr />

<h3 id="-자바는-jvm을-통해-os로-도달">📌 자바는 JVM을 통해 OS로 도달</h3>
<ul>
  <li><strong>JVM까지의 과정</strong>: 자바는 Java Compiler를 통해 <code class="language-plaintext highlighter-rouge">.java</code> 파일을 <code class="language-plaintext highlighter-rouge">.class</code> 파일로 변환한 다음, 이를 JVM이 처리하여 OS에서 실행.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">.java → Java Compiler → .class → JVM → OS</code></li>
    </ul>
  </li>
  <li>Java Compiler는 <code class="language-plaintext highlighter-rouge">jdk/bin/javac.exe</code> 위치에 있습니다.</li>
</ul>

<hr />

<h2 id="2-jvm-구성요소">2. JVM 구성요소</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/dd/JvmSpec7.png" alt="JVM 구조" />
<em>출처: 위키피디아</em></p>

<h3 id="21--클래스로더-class-loader">2.1 🔹 클래스로더 (Class Loader)</h3>
<ul>
  <li>JVM 내에서 클래스 파일 및 JAR 내 저장된 클래스를 로드하고, 이를 JVM 위에 탑재.</li>
</ul>

<hr />

<h3 id="22--실행엔진-execution-engine">2.2 🔹 실행엔진 (Execution Engine)</h3>
<ul>
  <li>Java 바이트코드(<code class="language-plaintext highlighter-rouge">.class</code>)를 실제로 실행.</li>
  <li>바이트코드는 사람이 보기 편하도록 설계되었으나, 실행엔진이 이를 실제 기계어로 변환.</li>
</ul>

<h4 id="️-인터프리터">▶️ <strong>인터프리터</strong></h4>
<ul>
  <li>바이트코드를 한 줄씩 읽고 해석하여 실행.</li>
</ul>

<h4 id="️-jit-컴파일러">▶️ <strong>JIT 컴파일러</strong></h4>
<ul>
  <li><strong>Just-In-Time Compilation</strong>: 실행 중 바이트코드를 기계어로 번역.</li>
  <li>인터프리터 방식의 단점(속도 문제)을 보완.</li>
</ul>

<h4 id="️-가비지-컬렉터">▶️ <strong>가비지 컬렉터</strong></h4>
<ul>
  <li>사용되지 않는 객체를 탐색하여 메모리에서 제거.</li>
  <li>메모리 누수를 방지하며, 별도의 정리 글에서 자세히 다룰 예정.</li>
</ul>

<hr />

<h3 id="23--런타임-데이터-영역-runtime-data-area">2.3 🔹 런타임 데이터 영역 (Runtime Data Area)</h3>
<ul>
  <li>운영체제로부터 할당받은 메모리 공간.</li>
  <li>흔히 Method, Heap, Stack 영역으로 알려진 메모리 구조.</li>
</ul>

<hr />

<h4 id="️-pc-register">▶️ <strong>PC Register</strong></h4>
<ul>
  <li>각 스레드에 하나씩 생성.</li>
  <li>현재 실행 중인 명령어의 위치를 저장.</li>
</ul>

<h4 id="️-jvm-스택">▶️ <strong>JVM 스택</strong></h4>
<ul>
  <li>메서드 내 데이터 저장 공간. (예: 매개변수, 지역 변수, 리턴 값 등)</li>
</ul>

<h4 id="️-native-method-stack">▶️ <strong>Native Method Stack</strong></h4>
<ul>
  <li>자바가 아닌 타 언어(C, C++ 등)로 작성된 네이티브 코드 실행을 위한 메모리 공간.</li>
</ul>

<h4 id="️-method-area">▶️ <strong>Method Area</strong></h4>
<ul>
  <li>클래스 정보 및 클래스 변수 저장 공간.</li>
  <li>런타임 상수 풀(Runtime Constant Pool)에서 상수 관리.</li>
</ul>

<h4 id="️-heap">▶️ <strong>Heap</strong></h4>
<ul>
  <li><strong>객체와 배열</strong>을 저장하는 메모리 공간.</li>
</ul>

<h5 id="-newyoung-영역">🔸 <strong>New/Young 영역</strong></h5>
<ul>
  <li>생명 주기가 짧은 객체를 저장.</li>
  <li>가비지 컬렉션(GC)에 의해 정리되며, <strong>Minor GC</strong>로 처리.</li>
  <li>구성:
    <ul>
      <li><strong>Eden 영역</strong>: 객체가 최초로 생성되는 장소.</li>
      <li><strong>Survivor 영역(Survivor 0, Survivor 1)</strong>: Eden에서 살아남은 객체들이 이동.</li>
    </ul>
  </li>
</ul>

<h5 id="-old-영역">🔸 <strong>Old 영역</strong></h5>
<ul>
  <li>생명 주기가 긴 객체를 저장.</li>
  <li><strong>Major GC</strong>로 정리되며, Minor GC보다 속도가 느림.</li>
</ul>]]></content><author><name>DavidDarnes</name></author><category term="Java" /><summary type="html"><![CDATA[1. Java Virtual Machine, 자바 실행기 📌 자바는 JVM을 통해 OS로 도달 JVM까지의 과정: 자바는 Java Compiler를 통해 .java 파일을 .class 파일로 변환한 다음, 이를 JVM이 처리하여 OS에서 실행. .java → Java Compiler → .class → JVM → OS Java Compiler는 jdk/bin/javac.exe 위치에 있습니다. 2. JVM 구성요소 출처: 위키피디아 2.1 🔹 클래스로더 (Class Loader) JVM 내에서 클래스 파일 및 JAR 내 저장된 클래스를 로드하고, 이를 JVM 위에 탑재. 2.2 🔹 실행엔진 (Execution Engine) Java 바이트코드(.class)를 실제로 실행. 바이트코드는 사람이 보기 편하도록 설계되었으나, 실행엔진이 이를 실제 기계어로 변환. ▶️ 인터프리터 바이트코드를 한 줄씩 읽고 해석하여 실행. ▶️ JIT 컴파일러 Just-In-Time Compilation: 실행 중 바이트코드를 기계어로 번역. 인터프리터 방식의 단점(속도 문제)을 보완. ▶️ 가비지 컬렉터 사용되지 않는 객체를 탐색하여 메모리에서 제거. 메모리 누수를 방지하며, 별도의 정리 글에서 자세히 다룰 예정. 2.3 🔹 런타임 데이터 영역 (Runtime Data Area) 운영체제로부터 할당받은 메모리 공간. 흔히 Method, Heap, Stack 영역으로 알려진 메모리 구조. ▶️ PC Register 각 스레드에 하나씩 생성. 현재 실행 중인 명령어의 위치를 저장. ▶️ JVM 스택 메서드 내 데이터 저장 공간. (예: 매개변수, 지역 변수, 리턴 값 등) ▶️ Native Method Stack 자바가 아닌 타 언어(C, C++ 등)로 작성된 네이티브 코드 실행을 위한 메모리 공간. ▶️ Method Area 클래스 정보 및 클래스 변수 저장 공간. 런타임 상수 풀(Runtime Constant Pool)에서 상수 관리. ▶️ Heap 객체와 배열을 저장하는 메모리 공간. 🔸 New/Young 영역 생명 주기가 짧은 객체를 저장. 가비지 컬렉션(GC)에 의해 정리되며, Minor GC로 처리. 구성: Eden 영역: 객체가 최초로 생성되는 장소. Survivor 영역(Survivor 0, Survivor 1): Eden에서 살아남은 객체들이 이동. 🔸 Old 영역 생명 주기가 긴 객체를 저장. Major GC로 정리되며, Minor GC보다 속도가 느림.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>